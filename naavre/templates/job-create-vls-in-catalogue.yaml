{{- if and .Values.jupyterhub.enabled (index .Values "naavre-catalogue-service" "enabled") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  labels:
    {{- include "naavre.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-install,post-upgrade,post-rollback
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  template:
    spec:
      serviceAccountName: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
      containers:
        - name: executor
          image: bitnamilegacy/kubectl:latest
          command: ["sh", "-c"]
          args:
            - |
              APP_NAME="{{ template "naavre-catalogue-service.name" (index .Subcharts "naavre-catalogue-service") }}"
              POD_NAME=$(kubectl get pod -l app.kubernetes.io/name=$APP_NAME -o jsonpath='{.items[0].metadata.name}');
              echo "Waiting for pod $POD_NAME"
              kubectl wait --for=condition=ready pod $POD_NAME --timeout=300s || exit 1
              kubectl exec -i $POD_NAME -- python /code/app/manage.py shell < /mnt/django_script.py
          volumeMounts:
            - mountPath: /mnt/django_script.py
              name: django-script
              subPath: django_script.py
      volumes:
        - name: django-script
          configMap:
            name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
      restartPolicy: Never
  backoffLimit: 3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
data:
  django_script.py: |
    import json
    from virtual_labs.models import VirtualLab
    protocol = "http{{ if .Values.jupyterhub.ingress.tls }}s{{ end }}"
    host = "{{ index .Values.jupyterhub.ingress.hosts 0 }}"
    base_url = "{{ trimAll "/" .Values.jupyterhub.hub.baseUrl }}"
    vlabs = json.loads({{ .Values.global.vlabs | toJson | quote }})
    for vlab in vlabs.values():
      enabled = vlab["enabled"]
      slug = vlab["slug"]
      title = vlab["title"]
      description = vlab["description"]
      deployment_url = f"{protocol}://{host}/{base_url}/user-redirect/lab/workspaces/{slug}/?profile={vlab['slug']}"
      container_image = f"{vlab['image']['name']}:{vlab['image']['tag']}"
      image = vlab.get("icon", "").strip()
      if enabled:
        print("Checking for vlab", slug)
        qs = VirtualLab.objects.filter(slug=slug)
        if not qs.exists():
            print("Creating vlab", slug)
            VirtualLab.objects.create(
                slug=slug,
                title=title,
                description=description,
                deployment_url=deployment_url,
                container_image=container_image,
                image=image,
                )
        else:
            print("Updating vlab", slug)
            qs.update(
                title=title,
                description=description,
                deployment_url=deployment_url,
                container_image=container_image,
                image=image,
                )
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  labels:
    {{- include "naavre.labels" . | nindent 4 }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  labels:
    {{- include "naavre.labels" . | nindent 4 }}
rules:
  - apiGroups: ['']
    resources: ['pods']
    verbs: ['list', 'get', 'watch']
  - apiGroups: ['']
    resources: ['pods/exec']
    verbs: ['create']
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  labels:
    {{- include "naavre.labels" . | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
roleRef:
  kind: Role
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  apiGroup: rbac.authorization.k8s.io
{{- end }}