jupyterhub:
  enabled: {{ .Values.jupyterhub.enabled }}
  fullnameOverride: "{{ include "values.fullname" . }}-jupyter"

  hub:
    concurrentSpawnLimit: 10
    consecutiveFailureLimit: 16
    activeServerLimit: 16
    namedServerLimitPerUser: 1
    shutdownOnLogout: true
    baseUrl: "/{{ trimAll "/" .Values.jupyterhub.ingress.basePath }}"
    config:
      Authenticator:
        enable_auth_state: true
      GenericOAuthenticator:
        login_service: keycloak
        username_claim: preferred_username
        userdata_params:
          state: state
        claim_groups_key: groups
        manage_groups: True
        allowed_groups:
          - users
        admin_groups:
          - admins
        oauth_callback_url: "https://{{ .Values.global.ingress.domain }}/{{ trimAll "/" .Values.jupyterhub.ingress.basePath }}/hub/oauth_callback"
        {{- if .Values.global.externalServices.keycloak.useExternal }}
        client_id: "{{ .Values.global.externalServices.keycloak.client_id }}"
        client_secret: "{{ .Values.global.externalServices.keycloak.client_secret }}"
        authorize_url: "{{ trimSuffix "/" .Values.global.externalServices.keycloak.url }}/realms/{{ .Values.global.externalServices.keycloak.realm }}/protocol/openid-connect/auth"
        token_url: "{{ trimSuffix "/" .Values.global.externalServices.keycloak.url }}/realms/{{ .Values.global.externalServices.keycloak.realm }}/protocol/openid-connect/token"
        userdata_url: "{{ trimSuffix "/" .Values.global.externalServices.keycloak.url }}/realms/{{ .Values.global.externalServices.keycloak.realm }}/protocol/openid-connect/userinfo"
        {{- else }}
        client_id: naavre
        client_secret: "{{ .Values.global.secrets.keycloak.naavreClientSecret }}"
        authorize_url: "https://{{ .Values.global.ingress.domain }}/{{ trimAll "/" .Values.keycloak.ingress.basePath }}/realms/vre/protocol/openid-connect/auth"
        token_url: "https://{{ .Values.global.ingress.domain }}/{{ trimAll "/" .Values.keycloak.ingress.basePath }}/realms/vre/protocol/openid-connect/token"
        userdata_url: "https://{{ .Values.global.ingress.domain }}/{{ trimAll "/" .Values.keycloak.ingress.basePath }}/realms/vre/protocol/openid-connect/userinfo"
        {{- end }}
      JupyterHub:
        authenticator_class: generic-oauth
    {{- with .Values.jupyterhub.hub.initContainers }}
    initContainers:
      {{- toYaml . | nindent 6}}
    {{- end}}
    {{- with .Values.jupyterhub.hub.extraVolumes }}
    extraVolumes:
      {{- toYaml . | nindent 6}}
    {{- end}}
    {{- with .Values.jupyterhub.hub.extraVolumeMounts }}
    extraVolumeMounts:
      {{- toYaml . | nindent 6}}
    {{- end}}
    extraConfig:
      {{- with .Values.jupyterhub.hub.extraConfig }}
      {{- toYaml . | nindent 6}}
      {{- end}}
      generic_env_oauthenticator.py: |
        from oauthenticator.generic import GenericOAuthenticator
        class GenericEnvOAuthenticator(GenericOAuthenticator):
            async def pre_spawn_start(self, user, spawner):
                auth_state = await user.get_auth_state()
                if not auth_state:
                    return
                spawner.environment['OAUTH_ACCESS_TOKEN'] = auth_state.get('access_token')
                spawner.environment['OAUTH_REFRESH_TOKEN'] = auth_state.get('refresh_token')
        c.JupyterHub.authenticator_class = GenericEnvOAuthenticator
      custom_kubespawner.py: |
        # Workaround for jupyterhub/kubespawner#877
        # Source: https://discourse.jupyter.org/t/creating-1-pvc-per-profile-and-per-user/31755/5
        from kubespawner import KubeSpawner
        class CustomKubeSpawner(KubeSpawner):
            def get_pvc_manifest(self):
                self.pvc_name = self._expand_user_properties(self.pvc_name_template)
                self.pod_name = self._expand_user_properties(self.pod_name_template)
                return super().get_pvc_manifest()
                return super().get_pod_manifest()
        c.JupyterHub.spawner_class = CustomKubeSpawner

  ingress:
    enabled: true
    ingressClassName: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      {{- with .Values.global.ingress.commonAnnotations }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
    hosts:
      - "{{ .Values.global.ingress.domain }}"
    {{- if .Values.global.ingress.tls.enabled }}
    tls:
      - hosts:
          - "{{ .Values.global.ingress.domain }}"
        secretName: "{{ .Values.global.ingress.domain }}-tls"
    {{- end }}

  proxy:
    service:
      type: ClusterIP

  singleuser:
    defaultUrl: "/lab"
    startTimeout: 600
    extraAnnotations:
      {{- toYaml .Values.global.common.velero.podAnnotations | nindent 6 }}

    extraFiles:
      jupyter_notebook_config.json:
        mountPath: /etc/jupyter/jupyter_notebook_config.json
        data:
          ServerApp:
            iopub_data_rate_limit: 1.0e10
            iopub_msg_rate_limitFloat: 3000
      overrides.json:
        mountPath: /opt/conda/share/jupyter/lab/settings/overrides.json
        stringData: |
          {
            "@naavre/containerizer-jupyterlab:plugin": {
              "containerizerServiceUrl": "https://{{ $.Values.global.ingress.domain }}/{{ trimAll "/" ($.Values.naavreContainerizerService.ingress.basePath) }}",
              "catalogueServiceUrl": "https://{{ $.Values.global.ingress.domain }}/{{ trimAll "/" ($.Values.naavreCatalogueService.ingress.basePath) }}"
            },
            "@naavre/workflow-jupyterlab:plugin": {
              "workflowServiceUrl": "https://{{ $.Values.global.ingress.domain }}/{{ trimAll "/" ($.Values.naavreWorkflowService.ingress.basePath) }}",
              "catalogueServiceUrl": "https://{{ $.Values.global.ingress.domain }}/{{ trimAll "/" ($.Values.naavreCatalogueService.ingress.basePath) }}"
            }
          }

    memory:
      limit: {{ .Values.jupyterhub.singleuser.memory.limit }}
      guarantee: {{ .Values.jupyterhub.singleuser.memory.guarantee }}
    cpu:
      limit: {{ .Values.jupyterhub.singleuser.cpu.limit }}
      guarantee: {{ .Values.jupyterhub.singleuser.cpu.guarantee }}
    storage:
      capacity: {{ .Values.jupyterhub.singleuser.storage.capacity }}
      {{- if .Values.jupyterhub.singleuser.storage.dynamic }}
      dynamic:
        {{ .Values.jupyterhub.singleuser.storage.dynamic | toYaml | nindent 6}}
      {{- end }}
      {{- if .Values.jupyterhub.singleuser.storage.extraVolumes }}
      extraVolumes:
        {{ .Values.jupyterhub.singleuser.storage.extraVolumes | toYaml | nindent 6 }}
      {{- end }}
      {{- if .Values.jupyterhub.singleuser.storage.extraVolumeMounts }}
      extraVolumeMounts:
        {{ .Values.jupyterhub.singleuser.storage.extraVolumeMounts | toYaml | nindent 6 }}
      {{- end }}

    extraEnv:
      NAAVRE_ALLOWED_DOMAINS: "{{ .Values.global.ingress.domain }}"

    profileList:
      {{- range .Values.jupyterhub.vlabs }}
      - display_name: "{{ .slug }}"
        kubespawner_override:
          image: "{{ .image.name }}:{{ .image.tag }}"
          pullPolicy: IfNotPresent
          pvc_name_template: "jupyter-lab-{username}"
          pod_name_template: "jupyter-lab-{{ .slug }}-{user_server}"
          lifecycle_hooks:
            postStart:
              exec:
                command:
                  - "sh"
                  - "-c"
                  - |
                    for ext in "containerizer" "workflow"; do
                      dir=".jupyter/lab/user-settings/@naavre/$ext-jupyterlab/"
                      mkdir -p "$dir"
                      echo '{"virtualLab":"{{ .slug }}"}' > "$dir/plugin.jupyterlab-settings"
                    done
                    {{- if .postStartShSnippet }}
                    {{- .postStartShSnippet | nindent 20 }}
                    {{- end }}
          {{- if .cmd | default "" }}
          cmd:
            {{- toYaml .cmd | nindent 12 }}
          {{- end }}
          environment:
            NAAVRE_LOG_QUERIES: "{{ .configuration.log_queries | default false | printf "%t" }}"
      {{- end }}
