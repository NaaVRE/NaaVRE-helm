{{- if and .Values.jupyterhub.enabled (index .Values "naavre-catalogue-service" "enabled") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  labels:
    {{- include "naavre.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-install,post-upgrade,post-rollback
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  template:
    spec:
      serviceAccountName: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
      containers:
        - name: executor
          image: alpine:latest
          command: ["sh", "-c"]
          args:
            - |
              set -e
              k8s_version=$(wget -qO - https://dl.k8s.io/release/stable.txt)
              wget -q "https://dl.k8s.io/release/$k8s_version/bin/linux/amd64/kubectl"
              wget -q "https://dl.k8s.io/release/$k8s_version/bin/linux/amd64/kubectl.sha256"
              echo "$(cat kubectl.sha256) kubectl" | sha256sum -c
              chmod +x kubectl
              APP_NAME="{{ template "naavre-catalogue-service.name" (index .Subcharts "naavre-catalogue-service") }}"
              POD_NAME=$(./kubectl get pod -l app.kubernetes.io/name=$APP_NAME -o jsonpath='{.items[0].metadata.name}');
              echo "Waiting for pod $POD_NAME"
              ./kubectl wait --for=condition=ready pod $POD_NAME --timeout=300s || exit 1
              ./kubectl exec -i $POD_NAME -- python /code/app/manage.py shell < /mnt/django_script.py
          volumeMounts:
            - mountPath: /mnt/django_script.py
              name: django-script
              subPath: django_script.py
      volumes:
        - name: django-script
          configMap:
            name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
      restartPolicy: Never
  backoffLimit: 3
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
data:
  django_script.py: |
    import json
    from base_assets.models import SharingScope
    from virtual_labs.models import VirtualLabLabel, VirtualLab

    from base_assets.models import SharingScope

    protocol = "http{{ if .Values.jupyterhub.ingress.tls }}s{{ end }}"
    host = "{{ index .Values.jupyterhub.ingress.hosts 0 }}"
    base_url = "{{ trimAll " / " .Values.jupyterhub.hub.baseUrl }}"


    def create_or_update(model_class, search_field, object_dict):
        search_value = object_dict[search_field]
        log_repr = f'{model_class.__name__}({search_field}={repr(search_value)})'
        print(f'\nSearching {log_repr}')
        qs = model_class.objects.filter(**{search_field: search_value})
        if not qs.exists():
            print(f'Creating {json.dumps(object_dict)}')
            obj = model_class.objects.create(**object_dict)
        else:
            print(f'Updating {json.dumps(object_dict)}')
            qs.update(**object_dict)
            obj = qs[0]
        return obj


    communities = json.loads({{.Values.global.communities | toJson | quote}})
    vlab_labels = json.loads({{.Values.global.vlabLabels | toJson | quote}})
    vlabs = json.loads({{.Values.global.vlabs | toJson | quote}})

    sharing_scopes_community_objects = {
        key: create_or_update(
            SharingScope,
            'slug',
            {
                'slug': key,
                'label': 'community',
                **community
                })
        for key, community in communities.items()
        }

    sharing_scopes_virtual_lab_objects = {
        vlab['slug']: create_or_update(
            SharingScope,
            'slug',
            {
                'slug': vlab['slug'],
                'label': 'virtual_lab',
                'title': vlab['title'],
                })
        for vlab in vlabs.values()
        }

    vlab_label_objects = {
        key: create_or_update(
            VirtualLabLabel,
            'title',
            vlab_label)
        for key, vlab_label in vlab_labels.items()
        }

    for vlab in vlabs.values():
        if vlab['enabled']:
            vlab['deployment_url'] = f"{protocol}://{host}/{base_url}/user-redirect/lab/workspaces/{vlab['slug']}/?profile={vlab['slug']}"
            vlab['container_image'] = f"{vlab['image']['name']}:{vlab['image']['tag']}"
            vlab['image'] = vlab.get("icon", "").strip()

            obj = create_or_update(
                VirtualLab,
                'slug',
                {
                    'slug': vlab['slug'],
                    'title': vlab['title'],
                    'description': vlab['description'],
                    'deployment_url': vlab['deployment_url'],
                    'container_image': vlab['container_image'],
                    'image': vlab['image'],
                    })

            # Set labels
            labels = []
            for key in vlab["labels"]:
                try:
                    labels.append(vlab_label_objects[key])
                except KeyError:
                    print(f"Vlab {vlab['slug']} uses undefined label ({key})."
                          " It is defined in vlabLabels?")
            obj.labels.set(labels)

            # Set visible_sharing_scopes
            obj.visible_sharing_scopes.set(
                list(sharing_scopes_community_objects.values()) +
                list(sharing_scopes_virtual_lab_objects.values()))

            # Set checked_sharing_scopes
            checked_sharing_scopes = [sharing_scopes_virtual_lab_objects[vlab['slug']]]
            for key in vlab["communities"]:
                try:
                    checked_sharing_scopes.append(sharing_scopes_community_objects[key])
                except KeyError:
                    print(f"Vlab {vlab['slug']} uses undefined community ({key})."
                          " It is defined in communities?")
            obj.checked_sharing_scopes.set(checked_sharing_scopes)

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  labels:
    {{- include "naavre.labels" . | nindent 4 }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  labels:
    {{- include "naavre.labels" . | nindent 4 }}
rules:
  - apiGroups: ['']
    resources: ['pods']
    verbs: ['list', 'get', 'watch']
  - apiGroups: ['']
    resources: ['pods/exec']
    verbs: ['create']
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  labels:
    {{- include "naavre.labels" . | nindent 4 }}
subjects:
  - kind: ServiceAccount
    name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
roleRef:
  kind: Role
  name: "{{ include "naavre.fullname" . }}-create-vls-in-catalogue"
  apiGroup: rbac.authorization.k8s.io
{{- end }}